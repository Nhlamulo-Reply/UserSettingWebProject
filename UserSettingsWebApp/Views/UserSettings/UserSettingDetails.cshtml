@model UserSettingsShareProject.Models.UserSetting;

<div class="text-center">
    <p class="headingText">User Settings Details</p>
</div>
<div style="border: 1px solid silver;">
    <div style="padding:30px">
        <table>
            <tr>
                <td class="font-weight-bold">Setting Description</td>
                <td><input type="text" class="user-details-form-inputs" id="settingDescription" value="@Model.SettingDescription" /></td>
                <td><p class="text-danger userSetting-Validation" id="settingDescriptionError"></p></td>
            </tr>
            <tr>
                <td class="font-weight-bold">Screensaver Timeout (Seconds)</td>
                <td><input type="number" class="user-details-form-inputs" id="screenSaverTimeout" value="@Model.ScreenSaverTimeout" /></td>
                <td><p class="text-danger userSetting-Validation" id="screenSaverTimeoutError"></p></td>
            </tr>
            <tr>
                <td class="font-weight-bold">Pop-Up Timeout (Seconds)</td>
                <td><input type="number" class="user-details-form-inputs" id="popupTimeout" value="@Model.PopupTimeout" /></td>
                <td><p class="text-danger userSetting-Validation" id="popupTimeoutError"></p></td>
            </tr>
            <tr>
                <td class="font-weight-bold">Desktop Timeout (Seconds)</td>
                <td><input type="number" class="user-details-form-inputs" id="desktopTimeout" value="@Model.DesktopTimeout" /></td>
                <td><p class="text-danger userSetting-Validation" id="desktopTimeoutError"></p></td>
            </tr>
            <tr>
                <td class="font-weight-bold">Ticker Timeout (Seconds)</td>
                <td><input type="number" class="user-details-form-inputs" id="tickerTimeout" value="@Model.TickerTimeout" /></td>
                <td><p class="text-danger userSetting-Validation" id="tickerTimeoutError"></p></td>
            </tr>
            <tr>
                <td class="font-weight-bold">Sync Timeout (Seconds)</td>
                <td><input type="number" class="user-details-form-inputs" id="syncTimeout" value="@Model.SyncTimeout" /></td>
                <td><p class="text-danger userSetting-Validation" id="syncTimeoutError"></p></td>
            </tr>
        </table>
    </div>
    <div class="text-center" style="margin-top:20px;margin-bottom:20px;">
        <button class="btn btn-secondary action-btn" onclick="CreateOrUpdate()">Save</button>
        <button class="btn btn-secondary action-btn" style="margin-left:10px;margin-right:10px" id="deleteBtn" onclick="Delete()">Delete</button>
        <button class="btn btn-secondary action-btn" onclick="ClearInputFields()">Clear</button>
    </div>
</div>

<script>

    $(document).ready(function() 
    {
        $("#UserDetailsLoader").hide();
        if('@Model.Id' == '0')
        {
            $("#deleteBtn").hide();
        }
    });

    function ClearInputFields()
    {
        $("#settingDescription").val("");
        $("#screenSaver").val("");
        $("#popupTimeout").val("");
        $("#desktopTimeout").val("");
        $("#tickerTimeout").val("");
        $("#syncTimeout").val("");
    }

    function ClearErrorTexts()
    {
        $("#settingDescriptionError").text("");
        $("#screenSaverTimeoutError").text("");
        $("#popupTimeoutError").text("");
        $("#desktopTimeoutError").text("");
        $("#tickerTimeoutError").text("");
        $("#syncTimeoutError").text("");
    }

    function CreateOrUpdate()
    {
        ClearErrorTexts();

        var settingsDescription = $("#settingDescription").val();
        var screenSaverTimeout = $("#screenSaverTimeout").val();
        var popupTimeout = $("#popupTimeout").val();
        var desktopTimeout = $("#desktopTimeout").val();
        var tickerTimeout = $("#tickerTimeout").val();
        var syncTimeout = $("#syncTimeout").val();

        var allFieldsValid = AllFieldsValid(settingsDescription, screenSaverTimeout, popupTimeout, desktopTimeout, tickerTimeout, syncTimeout);
        
        if (!allFieldsValid)
            return;
        
        var id = '@Model.Id';

        var jsonObj = {
            Id: id,
            SettingDescription: settingsDescription,
            ScreenSaverTimeout: screenSaverTimeout,
            PopupTimeout: popupTimeout,
            DesktopTimeout: desktopTimeout,
            TickerTimeout: tickerTimeout,
            SyncTimeout: syncTimeout,
        };

        var payload = JSON.stringify(jsonObj);

        var url = "";
        var method = "";

        if(id == 0)
        {
            url = '@Url.Action("CreateUserSettingDetails", "UserSettings")' + "?payload=" + payload;
            method = "POST";
        }
        else
        {
            url = '@Url.Action("UpdateUserSettingDetails", "UserSettings")' + "?payload=" + payload;
            method = "PUT";
        }

        var successUrl = '@Url.Action("Index", "UserSettings")';

        LoadWithSpinner(url, "", "#UserDetailsLoader", method, successUrl);

    }

    function Delete()
    {
        var url = '@Url.Action("DeleteUserSetting", "UserSettings")' + "?id=@Model.Id";
        var successUrl = '@Url.Action("Index", "UserSettings")';

        LoadWithSpinner(url, "", "#UserDetailsLoader", "DELETE", successUrl);
    }

    function AllFieldsValid(settingsDescription, screenSaverTimeout, popupTimeout, desktopTimeout, tickerTimeout, syncTimeout)
    {
        var hasErrors = false;
        if (!IsValidateInput("Setting Description", settingsDescription, "#settingDescriptionError")) 
        {
            hasErrors = true;
        }
        if (!IsValidateInput("Screensaver Timeout", screenSaverTimeout, "#screenSaverTimeoutError")) 
        {
            hasErrors = true;
        }
        if (!IsValidateInput("PopUp Timeout", popupTimeout, "#popupTimeoutError")) 
        {
            hasErrors = true;
        }
        if (!IsValidateInput("Desktop Timeout", desktopTimeout, "#desktopTimeoutError")) 
        {
            hasErrors = true;
        }
        if (!IsValidateInput("Ticker Timeout", tickerTimeout, "#tickerTimeoutError")) 
        {
            hasErrors = true;
        }
        if (!IsValidateInput("Sync Timeout", syncTimeout, "#syncTimeoutError")) 
        {
            hasErrors = true;
        }
        return !hasErrors;
    }

    function IsValidateInput(inputFieldName, inputFieldValue, inputFieldErrorField)
    {
        if(inputFieldValue == null || inputFieldValue == "")
        {
            var errorMessage = inputFieldName + " cannot be empty!";
            $(inputFieldErrorField).text(errorMessage);

            return false;
        }
        else if(inputFieldValue != null && inputFieldName != "Setting Description" && inputFieldValue.length > 0 && inputFieldValue[0] == '-')
        {
            var errorMessage = inputFieldName + " cannot be negative number";
            $(inputFieldErrorField).text(errorMessage);

            return false;
        }
        return true;
    }

</script>